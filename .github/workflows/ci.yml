name: project_template CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.toolchain.file }}
    runs-on: ${{ matrix.os }}
    env:
      LD_LIBRARY_PATH: /usr/local/lib/x86_64-unknown-linux-gnu:/usr/local/lib
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        build_type: [Debug, Release]
        toolchain:
          - compiler: GCC
            stdlib: libstdcxx
            file: gcc_libstdcxx
            enable_clang_tidy: Off
          - compiler: Clang
            stdlib: libcxx
            file: clang_libcxx
            enable_clang_tidy: Off
        clang_tidy_path: [/usr/local/bin/clang-tidy]
    steps:
      - name: Install tools
        id: install_tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++-11  gcc-11 ninja-build wget
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100

      - name: Download and install LLVM
        id: download_llvm
        run: |
          wget https://github.com/cjdb/llvm-with-libcxx-nightly/releases/download/nightly/llvm-${{ matrix.toolchain.stdlib }}-x86_64-unknown-linux-gnu.tar.xz
          tar -xvf llvm-${{ matrix.toolchain.stdlib }}-x86_64-unknown-linux-gnu.tar.xz
          rm -f llvm-${{ matrix.toolchain.stdlib }}-x86_64-unknown-linux-gnu.tar.xz
          sudo  cp -r llvm-${{ matrix.toolchain.stdlib }}-x86_64-unknown-linux-gnu/* /usr/local/.
          rm -rf llvm-${{ matrix.toolchain.stdlib }}-x86_64-unknown-linux-gnu
          sudo find /usr/local -name '*unwind*'


      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Formatting
        id: git_clang_format
        run: git-clang-format
          --style file
          --extensions c,cc,cpp,cxx,h,hh,hpp,hxx
          --diff origin/main HEAD

      - name: Configure
        id: configure
        run:
          cmake -G Ninja -S . -B build
            -DCMAKE_INSTALL_PREFIX=/tmp/coco
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_TOOLCHAIN_FILE=`pwd`/config/cmake/toolchains/${{ matrix.toolchain.file }}.cmake
            -DCONSTEXPR_CONTRACTS_ENABLE_CLANG_TIDY=${{ matrix.toolchain.enable_clang_tidy }}
            -DCONSTEXPR_CONTRACTS_CLANG_TIDY_PATH=${{ matrix.clang_tidy_path }}

      - name: Build
        id: build
        run: ninja -C build -v

      - name: Test
        id: test
        run: |
          ctest -j$(nproc) --output-on-failure --test-dir build
          test/validate_contract_violation.py                       \
            --expected-output=test/print_contract_violation         \
            --process-name=build/test/test_print_contract_violation

      - name: Install
        id: install
        run: |
          ninja -C build install
          ls /tmp/coco/include/cjdb/contracts.hpp
          ls /tmp/coco/include/cjdb/detail/print_contract_violation.hpp
          ls /tmp/coco/lib/libcontracts.a
          ls /tmp/coco/lib/cmake/constexpr-contracts/constexpr-contracts-config.cmake
